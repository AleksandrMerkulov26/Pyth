# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

# li = [2, 'Hello', True, 36.6 ]
# for i in li:
#     print(type(i))

# print('**************************************************************************************************************')



# 2. Для списка реализовать обмен значений соседних элементов.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().

# li = (input('Введите колличество элементов списка:'))
# li_2 = list (li)
# li_2.remove(" ")
# for el in range(0, len(li_2) - 1, 2):
#     li_2[el], li_2[el + 1] = li_2[el + 1], li_2[el]
# print(li_2)





# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и dict.


# First_dictionary = {1: 'Winter', 2: 'Spring', 3:'Summer', 4:'Autumn'}
# First_list = ['Winter', 'Spring', 'Summer', 'Autumn' ]
# month = int(input('Введите месяц:'))
# if month ==12 or month ==1 or month ==2:
#     print(First_dictionary.get(1))
#     print(First_list[0])
# elif month ==3 or month ==4 or month ==5:
#     print(First_dictionary.get(2))
#     print(First_list[1])
# elif month ==6 or month ==7 or month ==8:
#     print(First_dictionary.get(3))
#     print(First_list[2])
# elif month ==9 or month == 10 or month ==11:
#     print(First_dictionary.get(3))
#     print(First_list[3])
# else:
#     print('Такого месяца нет')


# 4.Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки.
# Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

# st = input('Введите строку из нескольких слов разделённых пробелами:')
# print("\n" .join(st.split()))
# for i, a in enumerate(st,1):
#     print(i, a[0:10])



# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
# У пользователя нужно запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

# my_list = [8, 10, 5, 6, 3]
# print(f'Текущий рейтинг{my_list}')
# us = int(input('Введите число: '))
# for el in range(len(my_list)):
#     if my_list == us:
#         my_list.insert(el + 1, us)
#         break
#     elif my_list[-1] > us:
#         my_list.append(us)
#     elif my_list[0] < us:
#         my_list.insert(0, us)
#     elif my_list[el] > us and my_list[el + 1]:
#         my_list.insert(el + 1, us)
#     print(f'Новый рейтинг{my_list}')
#     us = int(input('введите число'))
