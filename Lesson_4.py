# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

# from sys import argv
#
# script_name, hours_production, rate_per_hour, bonus = argv
#
# print("Имя скрипта: ", script_name)
#
# print("Выработка в часах: ", hours_production)
# print("Ставка в час: ", rate_per_hour)
# print("Премия: ", bonus)
# print("Зарплата сотрудника: ", (float(hours_production) * float(rate_per_hour)) + float(bonus))
# print('#####################################################')


# 2. Представлен список чисел.
# Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

# try:
#     spisok = list(map(int, input('Введите элементы списка в виде целых чисел через пробел ').split()))
#     print(spisok)
#     new_spisok = [spisok[i] for i in range(1, len(spisok)) if spisok[i - 1] < spisok[i]]
#     print(new_spisok)
# except ValueError:
#     print('Требуется ввести целое число, а не строку символов или десятичное число')
# print('#####################################################')


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.
#
# a = 20
# b = 240
# spisok = [el for el in range(a, b + 1) if (el % 20 == 0) or (el % 21 == 0)]
# print(spisok)
# # print('#####################################################')

# 4. Представлен список чисел.
# Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
#
# spisok = list(map(int, input('Введите элементы списка в виде целых чисел через пробел ').split()))
# print(spisok)
# new_spisok = [el for el in spisok if spisok.count(el) == 1]
# print(new_spisok)
#print('#####################################################')

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

# from functools import reduce
#
#
# def my_func(prev_el, el):
#     return prev_el * el
#
#
# a = 1
# b = 10
# spisok = [el for el in range(a, b + 1) if el % 2 == 0]
# print(spisok)
# print('результат вычисления произведения всех элементов списка: ', reduce(my_func, spisok))
# print('#####################################################')
#
# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.
#
# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.